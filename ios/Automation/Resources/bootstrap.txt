/* ***** helper functions ***** */

// delay in seconds
function delay(secs)
{
	var date = new Date();
	var curDate = null;
	
	do { curDate = new Date(); }
	while(curDate-date < (secs * 1000.0));
} 

/* ***** main loop ***** */

// automation globals
var iosAutoPath = "$PATH_ROOT"
var target      = UIATarget.localTarget();
var application = target.frontMostApp();
var host = target.host();
var mainWindow  = application.mainWindow();

// loop variables
var runLoop = true;
var instructionNumber = 0;

// main loop
while (runLoop)
{
    var instructionFile = iosAutoPath + instructionNumber.toString() + "-cmd.txt";
    var responseFile = iosAutoPath + instructionNumber.toString() + "-resp.txt";
    var instruction = host.performTaskWithPathArgumentsTimeout("/bin/cat", [instructionFile], 5);
    if (instruction.exitCode == 0)
    {
        var resp = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<collection>\n";
        try
        {
        	var instructionText = instruction.stdout;
        	UIALogger.logDebug(instructionNumber.toString() + " - " + instructionText);
        	var jsCommands = instructionText.split('\n');
            for (var i = 0; i < jsCommands.length; i++)
            {
            	var jsCommand = jsCommands[i];
            	var evalResult = eval(jsCommand);
            	if (evalResult == null)
            	{
            		evalResult = "";
            	}
               	resp = resp + "<response>" + "0," + evalResult.toString() + "</response>\n";
            }
        }
        catch (err)
        {
            resp = resp + "<response>" + "-1," + err.description + "</response>\n";
        }
        resp = resp + "</collection>\n";
        UIALogger.logDebug(instructionNumber.toString() + " - Response -  " + resp);
        host.performTaskWithPathArgumentsTimeout("/usr/bin/python", [ iosAutoPath + "writeResponse.py" ,responseFile, resp], 5);
  	    instructionNumber++;
    }
}
